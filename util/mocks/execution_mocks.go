// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./execution/execution.go

package mocks

import (
	conf "github.com/imosquera/uploadthis/conf"
	commands "github.com/imosquera/uploadthis/commands"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of CommandProducer interface
type MockCommandProducer struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandProducerRecorder
}

// Recorder for MockCommandProducer (not exported)
type _MockCommandProducerRecorder struct {
	mock *MockCommandProducer
}

func NewMockCommandProducer(ctrl *gomock.Controller) *MockCommandProducer {
	mock := &MockCommandProducer{ctrl: ctrl}
	mock.recorder = &_MockCommandProducerRecorder{mock}
	return mock
}

func (_m *MockCommandProducer) EXPECT() *_MockCommandProducerRecorder {
	return _m.recorder
}

func (_m *MockCommandProducer) CreateCommandList(monitorDir *conf.MonitorDir) map[string]commands.Commander {
	ret := _m.ctrl.Call(_m, "CreateCommandList", monitorDir)
	ret0, _ := ret[0].(map[string]commands.Commander)
	return ret0
}

func (_mr *_MockCommandProducerRecorder) CreateCommandList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCommandList", arg0)
}

// Mock of CommandExecutor interface
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandExecutorRecorder
}

// Recorder for MockCommandExecutor (not exported)
type _MockCommandExecutorRecorder struct {
	mock *MockCommandExecutor
}

func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &_MockCommandExecutorRecorder{mock}
	return mock
}

func (_m *MockCommandExecutor) EXPECT() *_MockCommandExecutorRecorder {
	return _m.recorder
}

func (_m *MockCommandExecutor) ExecuteCommands(_param0 map[string]commands.Commander, _param1 conf.MonitorDir) {
	_m.ctrl.Call(_m, "ExecuteCommands", _param0, _param1)
}

func (_mr *_MockCommandExecutorRecorder) ExecuteCommands(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteCommands", arg0, arg1)
}

// Mock of CommandManager interface
type MockCommandManager struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandManagerRecorder
}

// Recorder for MockCommandManager (not exported)
type _MockCommandManagerRecorder struct {
	mock *MockCommandManager
}

func NewMockCommandManager(ctrl *gomock.Controller) *MockCommandManager {
	mock := &MockCommandManager{ctrl: ctrl}
	mock.recorder = &_MockCommandManagerRecorder{mock}
	return mock
}

func (_m *MockCommandManager) EXPECT() *_MockCommandManagerRecorder {
	return _m.recorder
}

func (_m *MockCommandManager) ExecuteCommandsForMonitors() {
	_m.ctrl.Call(_m, "ExecuteCommandsForMonitors")
}

func (_mr *_MockCommandManagerRecorder) ExecuteCommandsForMonitors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteCommandsForMonitors")
}
